name: Release and Publish

on:
  push:
    tags:
      - 'v[0-9]+\.[0-9]+\.[0-9]+'
  workflow_dispatch:
    inputs:
      version_tag:
        description: 'Release tag (e.g., v1.2.3)'
        required: true

permissions:
  contents: write
  packages: write

jobs:
  # 解析并校验版本号
  extract-version:
    name: Extract Version
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.set-version.outputs.version }}
    steps:
      - name: Determine version tag
        id: set-version
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            TAG="${{ github.event.inputs.version_tag }}"
          else
            TAG="${GITHUB_REF#refs/tags/}"
          fi
          if [[ ! "$TAG" =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "::error::Invalid version format: $TAG. Expected vX.Y.Z"
            exit 1
          fi
          echo "version=$TAG" >> $GITHUB_OUTPUT

  # 生成变更日志
  changelog:
    name: Generate Changelog
    runs-on: ubuntu-latest
    needs: extract-version
    outputs:
      body: ${{ steps.gen.outputs.changelog_body }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Fetch all tags
        run: git fetch --tags --force
      - id: gen
        run: |
          PREV_TAG=$(git describe --tags --abbrev=0 "${{ needs.extract-version.outputs.version }}^" 2>/dev/null || echo "")
          if [ -z "$PREV_TAG" ]; then
            echo "changelog_body=首次发布，无变更日志" >> $GITHUB_OUTPUT
          else
            RANGE="${PREV_TAG}..${{ needs.extract-version.outputs.version }}"
            if [ -s .github/changelog-include-prefixes.txt ]; then
              PREFIXES=$(paste -sd '|' .github/changelog-include-prefixes.txt)
              LOG=$(git log $RANGE --pretty=format:"- %h %s" | grep -E "($PREFIXES):" || true)
            else
              LOG=$(git log $RANGE --pretty=format:"- %h %s")
            fi
            BODY="## Changelog (${PREV_TAG} → ${{ needs.extract-version.outputs.version }})\n\n$LOG"
            echo -e "changelog_body<<EOF\n$BODY\nEOF" >> $GITHUB_OUTPUT
          fi

  # 并行打包三大平台，利用 cargo tauri build 自动触发 pnpm build
  build:
    name: Build Tauri App (${{ matrix.os }})
    needs: extract-version
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install system dependencies
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libwebkit2gtk-4.0-dev \
            libgtk-3-dev \
            libssl-dev \
            libayatana-appindicator3-dev \
            librsvg2-dev \
            pkg-config \
            libglib2.0-dev \
            build-essential \
            curl \
            wget \
            file

      - name: Setup Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          components: rustfmt, clippy

      - name: Install Tauri CLI
        run: cargo install tauri-cli

      - name: Cache Cargo
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'

      - name: Install pnpm
        run: npm install -g pnpm

      - name: Install frontend dependencies
        run: pnpm install --frozen-lockfile

      - name: Build frontend & Tauri
        run: cargo tauri build

      - name: Collect artifacts (Unix)
        if: matrix.os != 'windows-latest'
        run: |
          mkdir -p release-assets/${{ matrix.os }}
          cp -R target/release/bundle/* release-assets/${{ matrix.os }}/
        shell: bash

      - name: Collect artifacts (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          # 创建目标目录
          New-Item -ItemType Directory -Force -Path release-assets\${{ matrix.os }}
          # 递归拷贝 bundle 下所有文件
          Copy-Item target\release\bundle\* -Destination release-assets\${{ matrix.os }} -Recurse
        shell: pwsh

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: app-${{ matrix.os }}
          path: release-assets/${{ matrix.os }}

  # 创建 Release 并上传各平台资产
  publish:
    name: Create GitHub Release & Upload Assets
    needs: [extract-version, changelog, build]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ needs.extract-version.outputs.version }}
          name: Release ${{ needs.extract-version.outputs.version }}
          body: ${{ needs.changelog.outputs.body }}
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Download Ubuntu artifact
        uses: actions/download-artifact@v4
        with:
          name: app-ubuntu-latest
          path: assets/ubuntu
      - name: Download macOS artifact
        uses: actions/download-artifact@v4
        with:
          name: app-macos-latest
          path: assets/macos
      - name: Download Windows artifact
        uses: actions/download-artifact@v4
        with:
          name: app-windows-latest
          path: assets/windows

      - name: Upload Ubuntu assets
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ needs.extract-version.outputs.version }}
          files: assets/ubuntu/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Upload macOS assets
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ needs.extract-version.outputs.version }}
          files: assets/macos/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Upload Windows assets
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ needs.extract-version.outputs.version }}
          files: assets/windows/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
